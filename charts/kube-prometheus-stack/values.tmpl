alertmanager:
  enabled: true
  apiVersion: v2
  ingress:
    enabled: false

  alertmanagerSpec:
    nodeSelector:
#      role: kong
      system-tag: world-cereal-system
  
grafana:
  enabled: true
  defaultDashboardsEnabled: true

  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard

  persistence:
    enabled: false

  ingress:
    enabled: false
#  logLevel: DEBUG
  grafana.ini: 
    log:
      mode: "console"
      level: "debug"
    log.frontend:
      enabled: true
    server:
      domain: grafana.VALUE_HOSTNAME
      root_url: https://grafana.VALUE_HOSTNAME/
    auth:
      oauth_auto_login: true
      disable_login_form: true
      signout_redirect_url: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/logout?redirect_uri=https%3A%2F%2Fgrafana.VALUE_HOSTNAME

    auth.generic_oauth:
      enabled: true
      tls_skip_verify_insecure: true
      allow_sign_up: true
      client_id: grafana
      scopes: email openid
      auth_url: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/auth
      token_url: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/token
      api_url: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/userinfo
      #role_attribute_path: contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'
      role_attribute_strict: false
      client_secret: GRAFANA_CS

    database:
      type: postgres
      host: pgsqlha-pgpool.sysdb.svc.cluster.local
      user: postgres
      password: PG_PASS
      port: 5432
      name: grafana

    remote_cache:
      type: database

    unified_alerting:
      enabled: true
      ha_peers: kube-prometheus-stack-grafana-headless:3000
  
  nodeSelector:
#    role: kong
    system-tag: world-cereal-system

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name 
              operator: In
              values:
              - grafana
          topologyKey: kubernetes.io/hostname

  replicas: 3
  headlessService: true

prometheus:
  enabled: true
  
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelector:
      matchLabels:
        release: kube-prometheus-stack
    nodeSelector:
#      role: kong
      system-tag: world-cereal-system
    retention: 5d
    
    storageSpec: 
     volumeClaimTemplate:
       spec:
         #storageClassName: standard
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 100Gi

    replicas: 3

    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name 
              operator: In
              values:
              - prometheus
          topologyKey: kubernetes.io/hostname

    scrapeInterval: "60s"
    evaluationInterval: "60s"
    shards: 1

    resources:
      limits:
        memory: 16000Mi
      requests:
        memory: 4096Mi

  ingress:
    enabled: false

prometheusOperator:
  enabled: true
  hostNetwork: false        
  nodeSelector:
#    role: kong
    system-tag: world-cereal-system
kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    ## Enable scraping /metrics/resource from kubelet's service
    ## This is disabled by default because container metrics are already exposed by cAdvisor
    ##
    resource: true