alertmanager:
  enabled: true
  apiVersion: v2
  ingress:
    enabled: false

  alertmanagerSpec:
    nodeSelector:
      role: kong

  
grafana:
  enabled: true
  defaultDashboardsEnabled: true
  nodeSelector:
    role: kong
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard

      annotations: {}

  ingress:
    enabled: false

prometheus:
  enabled: true
  
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelectorNilUsesHelmValues: true
    serviceMonitorSelector:
      matchLabels:
        release: kube-prometheus-stack
    nodeSelector:
      role: kong
#      kubernetes.io/hostname: ewoc-prd-k8s-node-nf-2     
    retention: 2d
    
    storageSpec: 
     volumeClaimTemplate:
       spec:
         storageClassName: standard
         accessModes: ["ReadWriteOnce"]
         resources:
           requests:
             storage: 100Gi

    replicas: 3

    ## Interval between consecutive scrapes.
    ## Defaults to 30s.
    ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/release-0.44/pkg/prometheus/promcfg.go#L180-L183
    ##
    scrapeInterval: "60s"


    ## Interval between consecutive evaluations.
    ##
    evaluationInterval: "60s"

    ## EXPERIMENTAL: Number of shards to distribute targets onto.
    ## Number of replicas multiplied by shards is the total number of Pods created.
    ## Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved.
    ## Increasing shards will not reshard data either but it will continue to be available from the same instances.
    ## To query globally use Thanos sidecar and Thanos querier or remote write data to a central location.
    ## Sharding is done on the content of the `__address__` target meta-label.
    ##
    shards: 1

    resources:
      limits:
        memory: 8192Mi
      requests:
        memory: 4096Mi
  ingress:
    enabled: false

prometheusOperator:
  enabled: true
  hostNetwork: false        
  nodeSelector:
    role: kong

kubelet:
  enabled: true
  namespace: kube-system
  serviceMonitor:
    ## Enable scraping /metrics/resource from kubelet's service
    ## This is disabled by default because container metrics are already exposed by cAdvisor
    ##
    resource: true