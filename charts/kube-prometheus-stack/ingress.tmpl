apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: prometheus-oidc
plugin: oidc
config:
  bearer_only: "no"
  client_id: prometheus
  client_secret: PROMETHEUS_CS
  #discovery: http://auth.VALUE_HOSTNAME/auth/realms/worldcereal/.well-known/openid-configuration
  #introspection_endpoint: http://auth.VALUE_HOSTNAME/auth/realms/worldcereal/protocol/openid-connect/token/introspect
  discovery: https://auth.VALUE_HOSTNAME/realms/worldcereal/.well-known/openid-configuration
  introspection_endpoint: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/token/introspect 
  logout_path: /logout
  realm: worldcereal
  redirect_after_logout_uri: /
  #redirect_uri_path: null
  response_type: code
  scope: openid
  session_secret: null
  ssl_verify: "no"
  token_endpoint_auth_method: client_secret_post
---  
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-prod
#     konghq.com/https-redirect-status-code: "302"
#     konghq.com/protocols: https
#     kubernetes.io/ingress.class: kong
#     kubernetes.io/tls-acme: "true"
#     konghq.com/plugins: prometheus-oidc
#   name: prometheus
#   namespace: monitoring
# spec:
#   rules:
#   - host: prometheus.VALUE_HOSTNAME
#     http:
#       paths:
#       - backend:
#           serviceName: kube-prometheus-stack-prometheus
#           servicePort: 9090
#         path: /
#         pathType: ImplementationSpecific
#   tls:
#   - hosts:
#     - prometheus.VALUE_HOSTNAME
#     secretName: prometheustlscert

apiVersion: networking.k8s.io/v1
#apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    konghq.com/https-redirect-status-code: "302"
    konghq.com/protocols: https
    kubernetes.io/ingress.class: kong
    kubernetes.io/tls-acme: "true"
    konghq.com/plugins: prometheus-oidc
  name: prometheus
  namespace: monitoring
spec:
  rules:
    - host: prometheus.VALUE_HOSTNAME
      http:
        paths:
          - backend:
              service:
                name: kube-prometheus-stack-prometheus
                port:
                  number: 9090
            path: /
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - prometheus.VALUE_HOSTNAME
      secretName: prometheustlscert


# ---
# apiVersion: configuration.konghq.com/v1
# kind: KongPlugin
# metadata:
#   name: grafana-oidc
# plugin: oidc
# config:
#   bearer_only: "no"
#   client_id: grafana
#   client_secret: GRAFANA_CS
#   #discovery: https://auth.VALUE_HOSTNAME/auth/realms/worldcereal/.well-known/openid-configuration
#   #introspection_endpoint: https://auth.VALUE_HOSTNAME/auth/realms/worldcereal/protocol/openid-connect/token/introspect
#   discovery: https://auth.VALUE_HOSTNAME/realms/worldcereal/.well-known/openid-configuration
#   introspection_endpoint: https://auth.VALUE_HOSTNAME/realms/worldcereal/protocol/openid-connect/token/introspect
#   logout_path: /logout
#   realm: worldcereal
#   redirect_after_logout_uri: /
#   #redirect_uri_path: null
#   response_type: code
#   scope: openid
#   session_secret: null
#   ssl_verify: "no"
#   token_endpoint_auth_method: client_secret_post
---  
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-prod
#     konghq.com/https-redirect-status-code: "302"
#     konghq.com/protocols: https
#     kubernetes.io/ingress.class: kong
#     kubernetes.io/tls-acme: "true"
#     konghq.com/plugins: grafana-oidc
#   name: grafana
#   namespace: monitoring
# spec:
#   rules:
#   - host: grafana.VALUE_HOSTNAME
#     http:
#       paths:
#       - backend:
#           serviceName: kube-prometheus-stack-grafana
#           servicePort: 80
#         path: /
#         pathType: ImplementationSpecific
#   tls:
#   - hosts:
#     - grafana.VALUE_HOSTNAME
#     secretName: grafanatlscert

apiVersion: networking.k8s.io/v1
#apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    konghq.com/https-redirect-status-code: "302"
    konghq.com/protocols: https
    kubernetes.io/ingress.class: kong
    kubernetes.io/tls-acme: "true"
#    konghq.com/plugins: grafana-oidc
  name: grafana
  namespace: monitoring
spec:
  rules:
    - host: grafana.VALUE_HOSTNAME
      http:
        paths:
          - backend:
              service:
                name: kube-prometheus-stack-grafana
                port:
                  number: 80
            path: /
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - grafana.VALUE_HOSTNAME
      secretName: grafanatlscert